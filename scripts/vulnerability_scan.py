import subprocess
import sys
import os
import time # Import the time module
import docker
from findContainers import find_web_containers  

def run_docker_bench():
    print("Running DockerBench security scan...")
    
    # Check if Docker is running before proceeding
    try:
        subprocess.run(["docker", "ps"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except subprocess.CalledProcessError as e:
        print("Error: Docker daemon is not running or not accessible.")
        print(f"Details: {e.stderr.decode()}")
        return
    
    docker_bench_command = [
    "docker", "run", "--rm", 
        "--net", "host", "--pid", "host", "--userns", "host",
        "--cap-add", "audit_control",
        "-e", "DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST",
        "-v", "/etc:/etc:ro",
        "-v", "/usr/bin/containerd:/usr/bin/containerd:ro",
        "-v", "/usr/bin/runc:/usr/bin/runc:ro",
        "-v", "/usr/lib/systemd:/usr/lib/systemd:ro",
        "-v", "/var/lib:/var/lib:ro",
        "-v", "/var/run/docker.sock:/var/run/docker.sock:ro",
        "--label", "docker_bench_security",
        "docker/docker-bench-security"
    ]

    
    try:
        # Run DockerBench command and capture output
        result = subprocess.run(docker_bench_command, capture_output=True, text=True)
        
        if result.returncode != 0:
            print("DockerBench scan failed:", result.stderr)
            # Optionally log to a file
            with open("docker_bench_error.log", "w") as f:
                f.write(result.stderr)
        else:
            print(result.stdout)
            # Optionally log to a file
            with open("docker_bench_output.log", "w") as f:
                f.write(result.stdout)
                
    except Exception as e:
        print(f"Error running DockerBench: {e}")  # Capture general exceptions if any
        # Optionally log the exception to a file
        with open("docker_bench_exception.log", "w") as f:
            f.write(str(e))

def run_owasp_zap_scan(target_ip, port):
    client = docker.from_env()
    print("Starting OWASP ZAP scan...")
    user_id = os.getuid()
    group_id = os.getgid()
    
    # Pull the 'zaproxy/zap-stable' image
    client.images.pull("zaproxy/zap-stable")
    
    zap_command = [
        "docker", "run", "--rm", 
        "-u", f"{user_id}:{group_id}",
        "-v", f"{os.getcwd()}:/zap/wrk",  # Mount current directory to container
        "zaproxy/zap-stable",  # Updated image name
        "zap-baseline.py", 
        "-t", f"http://{target_ip}:{port}",  # Target for ZAP to scan
        "-l", "INFO",  # Set the log level to DEBUG for detailed logs
        "-r", "/zap/wrk/zap_report.html"  # Correct option for output report as HTML file
    ]
    
    try:
        # Use subprocess.Popen for real-time output streaming
        process = subprocess.Popen(zap_command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)

        # Stream output in real-time to the console
        for line in process.stdout:
            print(line.strip())

        process.wait()
        
        if process.returncode == 0:
            print("OWASP ZAP scan completed successfully.")
        else:
            print(f"OWASP ZAP scan encountered an error (Exit code: {process.returncode})")
    except Exception as e:
        print(f"Error running OWASP ZAP: {e}")

def run_trivy_scan(image_name):
    if not image_name or image_name.lower() == "n/a":
        print(f"Skipping scan: Invalid image name '{image_name}'.")
        return
    
    print(f"Running Trivy compliance and vulnerability scans on '{image_name}'...")
    
    compliance_command = ["trivy", "image", "--compliance", "docker-cis", image_name]
    vuln_command = ["trivy", "image", image_name]
    
    try:
        # Run compliance scan
        result_compliance = subprocess.run(compliance_command, capture_output=True, text=True)
        if result_compliance.returncode == 0:
            print("Compliance Scan Result:")
            print(result_compliance.stdout)
        else:
            print("Compliance Scan Error:")
            print(result_compliance.stderr)
        
        # Run vulnerability scan
        result_vuln = subprocess.run(vuln_command, capture_output=True, text=True)
        if result_vuln.returncode == 0:
            print("Vulnerability Scan Result:")
            print(result_vuln.stdout)
        else:
            print("Vulnerability Scan Error:")
            print(result_vuln.stderr)
    
    except FileNotFoundError:
        print("Error: Trivy is not installed or not found in the system PATH.")
    except Exception as e:
        print(f"Unexpected error running Trivy: {e}")


def run_nmap_scan(target_ip: str):
    print("Starting Nmap scan...")
    nmap_command = [
        "docker", "run", "--rm", "instrumentisto/nmap",
        "-sV", "-Pn", target_ip
    ]
    try:
        result = subprocess.run(nmap_command, capture_output=True, text=True)
        print("Nmap scan completed.")
        print(result.stdout)
    except Exception as e:
        print(f"Error running Nmap: {e}")

def main():
    # Find all web containers
    web_containers = find_web_containers()

    if not web_containers:
        print("No web containers found.")
        sys.exit(1)

    # Run Docker Bench security scan
    run_docker_bench()
    time.sleep(2)

    # Iterate over each web container and run scans
    for container in web_containers:
        print(f"Scanning container: {container['name']} at {container['ip']}:{container['host_port']}")

        # Run Trivy scan
        run_trivy_scan(container['image'])
        time.sleep(2)

        # Run OWASP ZAP scan if IP and port are available
        if container.get('ip') != 'N/A' and container.get('host_port') != 'N/A':
            run_owasp_zap_scan(container['ip'], container['host_port'])
        time.sleep(2)

        # Run Nmap scan
        if container.get('ip') != 'N/A':
            run_nmap_scan(container['ip'])
        time.sleep(2)

if __name__ == '__main__':
    main()
