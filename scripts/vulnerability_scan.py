import subprocess
import sys
import os
import time  # Import the time module
from findContainers import find_web_containers  

def run_docker_bench():
    print("Running DockerBench security scan...")
    docker_bench_command = [
        "docker", "run", "--rm", "--net", "host", "--pid", "host", "--cap-add", "audit_control",
        "-v", "/var/lib:/var/lib", "-v", "/var/run/docker.sock:/var/run/docker.sock",
        "-v", "/etc:/etc", "-v", "/usr/bin/docker:/usr/bin/docker",
        "docker/docker-bench-security"
    ]
    try:
        result = subprocess.run(docker_bench_command, capture_output=True, text=True)
        if result.returncode != 0:
            print("DockerBench scan failed:", result.stderr)
        else:
            print(result.stdout)
    except Exception as e:
        print(f"Error running DockerBench: {e}")

def run_owasp_zap_scan(target_ip, port):
    print("Starting OWASP ZAP scan...")
    user_id = os.getuid()
    group_id = os.getgid()

    zap_command = [
    "docker", "run", "--rm", 
    "-u", f"{user_id}:{group_id}",
    "-v", f"{os.getcwd()}:/zap/wrk",
    "owasp/zap2docker-stable", 
    "zap-baseline.py", 
    "-t", f"http://{target_ip}:{port}",
    "-v",  # Increase verbosity
    "-l", "DEBUG",  # Set the log level to DEBUG for detailed logs
    "--output", "/zap/wrk/zap_report.html"  # Output report as an HTML file (you can also output as JSON)
    ]
    try:
        result = subprocess.run(zap_command, capture_output=True, text=True)
        print("OWASP ZAP scan completed.")
        print(result.stdout)
    except Exception as e:
        print(f"Error running OWASP ZAP: {e}")

def run_trivy_scan(image_name):
    print(f"Running Trivy vulnerability scan on {image_name}...")
    try:
        result = subprocess.run(['trivy', 'image', '--exit-code', '1', '--no-progress', image_name], capture_output=True, text=True)
        if result.returncode != 0:
            print("Trivy scan failed:", result.stderr)
        else:
            print(result.stdout)
    except Exception as e:
        print(f"Error running Trivy: {e}")

def run_nmap_scan(target_ip: str):
    print("Starting Nmap scan...")
    nmap_command = [
        "docker", "run", "--rm", "instrumentisto/nmap",
        "-sV", "-Pn", target_ip
    ]
    try:
        result = subprocess.run(nmap_command, capture_output=True, text=True)
        print("Nmap scan completed.")
        print(result.stdout)
    except Exception as e:
        print(f"Error running Nmap: {e}")

def main():
    # Find all web containers
    web_containers = find_web_containers()

    if not web_containers:
        print("No web containers found.")
        sys.exit(1)

    # Run Docker Bench security scan
    run_docker_bench()
    time.sleep(2)

    # Iterate over each web container and run scans
    for container in web_containers:
        print(f"Scanning container: {container['name']} at {container['ip']}:{container['host_port']}")

        # Run Trivy scan
        run_trivy_scan(container['name'])
        time.sleep(2)

        # Run OWASP ZAP scan if IP and port are available
        if container.get('ip') != 'N/A' and container.get('host_port') != 'N/A':
            run_owasp_zap_scan(container['ip'], container['host_port'])
        time.sleep(2)

        # Run Nmap scan
        if container.get('ip') != 'N/A':
            run_nmap_scan(container['ip'])
        time.sleep(2)

if __name__ == '__main__':
    main()
